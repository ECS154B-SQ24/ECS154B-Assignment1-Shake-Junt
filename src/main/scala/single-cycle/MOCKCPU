/*// This file is where all of the CPU components are assembled into the whole CPU

package dinocpu

import chisel3._
import chisel3.util._
import dinocpu.components._
*/
/**
 * The main CPU definition that hooks up all of the other components.
 *
 * For more information, see section 4.4 of Patterson and Hennessy
 * This follows figure 4.21
 */
/*class SingleCycleCPU(implicit val conf: CPUConfig) extends BaseCPU {
  // All of the structures required
  val pc              = dontTouch(RegInit(0.U(64.W)))
  val control         = Module(new Control())
  val registers       = Module(new RegisterFile())
  val aluControl      = Module(new ALUControl())
  val alu             = Module(new ALU())
  val immGen          = Module(new ImmediateGenerator())
  val controlTransfer = Module(new ControlTransferUnit())
  val (cycleCount, _) = Counter(true.B, 1 << 30)

  // Connecting inputs and outputs of unused modules to DontCare
  control.io := DontCare
  registers.io := DontCare
  aluControl.io := DontCare
  alu.io := DontCare
  immGen.io := DontCare
  controlTransfer.io := DontCare
  io.dmem <> DontCare

  // FETCH
  io.imem.address := pc
  io.imem.valid := true.B

  val instruction = Wire(UInt(32.W))
  when ((pc % 8.U) === 4.U) {
    instruction := io.imem.instruction(63, 32)
  } .otherwise {
    instruction := io.imem.instruction(31, 0)
  }

  // Extracting instruction fields
  val opcode = instruction(6,0)
  val rd = instruction(11,7)
  val funct3 = instruction(14,12)
  val rs1 = instruction(19,15)
  val rs2 = instruction(24,20)
  val funct7 = instruction(31,25)

  // Setting control signals based on opcode
  control.io.opcode := opcode

  // Reading data from register file
  registers.io.readreg1 := rs1
  registers.io.readreg2 := rs2
  registers.io.writereg := rd
  registers.io.wen := (registers.io.writereg =/= 0.U)
  registers.io.writedata := alu.io.result

  // Setting ALU control signals
  aluControl.io.aluop := control.io.aluop
  aluControl.io.funct3 := funct3
  aluControl.io.funct7 := funct7

  // Connecting ALU inputs and control signals
  alu.io.operation := aluControl.io.operation
  alu.io.operand1 := registers.io.readdata1
  alu.io.operand2 := registers.io.readdata2

  // increments the program counter
  pc := pc + 4.U
}

/*
 * Object to make it easier to print information about the CPU
 */
/*object SingleCycleCPUInfo {
  def getModules(): List[String] = {
    List(
      "dmem",
      "imem",
      "control",
      "registers",
      "csr",
      "aluControl",
      "alu",
      "immGen",
      "controlTransfer"
    )
  }
}


//Extra code

//alu control to alu wires connections based on our diagram, added -Mari
  //alu.io.operation := aluControl.io.operation
  //alu.io.operand1 := registers.io.readdata1
  //alu.io.operand2 := registers.io.readdata2
  //registers.io.writedata := alu.io.result
  //aluControl.io.aluop := control.io.aluop
  //aluControl.io.funct7 := instruction(31,25)
  //registers.io.readreg2 := instruction(24,20)
  //registers.io.readreg1 := instruction(19, 15)
  //aluControl.io.funct3 := instruction(14, 12)
  //registers.io.writereg := instruction(11,7)
  //control.io.opcode := instruction(6,0)
  //missing the wen wire bc idk wth it does - Mari

  */


Nelson
donsven.
Online

mar — Today at 3:21 PM
//Your code goes here
  aluControl.io.aluop := control.io.aluop
  aluControl.io.funct7 := instruction(31, 25)
  aluControl.io.funct3 := instruction(14, 12)
  control.io.opcode := instruction(6, 0)
  alu.io.operation := aluControl.io.operation
  alu.io.operand1 := registers.io.readdata1
  alu.io.operand2 := registers.io.readdata2
  registers.io.readreg1 := instruction(19, 15)
  registers.io.readreg2 := instruction(24, 20)
  registers.io.writereg := instruction(11, 7)
  registers.io.writedata := alu.io.result
  registers.io.wen := control.io.validinst & control.io.writeback_valid
  incrementer.io.pc := pc
  pc := incrementer.io.newPC
}
val incrementer = Module(new PCIncrementer())
mar — Today at 3:30 PM
}
// This file is where all of the CPU components are assembled into the whole CPU

package dinocpu

import chisel3._
import chisel3.util._
import dinocpu.components._

/**
 * The main CPU definition that hooks up all of the other components.
 *
 * For more information, see section 4.4 of Patterson and Hennessy
 * This follows figure 4.21
 */
class SingleCycleCPU(implicit val conf: CPUConfig) extends BaseCPU {
  // All of the structures required
  val pc              = dontTouch(RegInit(0.U(64.W)))
  val control         = Module(new Control())
  val registers       = Module(new RegisterFile())
  val aluControl      = Module(new ALUControl())
  val alu             = Module(new ALU())
  val immGen          = Module(new ImmediateGenerator())
  val controlTransfer = Module(new ControlTransferUnit())
  val (cycleCount, _) = Counter(true.B, 1 << 30)

  control.io := DontCare
  registers.io := DontCare
  aluControl.io := DontCare
  alu.io := DontCare
  immGen.io := DontCare
  controlTransfer.io := DontCare
  io.dmem <> DontCare

  //FETCH
  io.imem.address := pc
  io.imem.valid := true.B

  val instruction = Wire(UInt(32.W))
  when ((pc % 8.U) === 4.U) {
    instruction := io.imem.instruction(63, 32)
  } .otherwise {
    instruction := io.imem.instruction(31, 0)
  }

  //Your code goes here
  // instruction will be a 32 bit long array, split in following lines
  // opcode
  control.io.opcode := instruction(6,0) 
  // rd
  registers.io.writereg := instruction(11,7)
  // funct 3
  aluControl.io.funct3 := instruction(14,12)  
  // rs1
  registers.io.readreg1 := instruction(19,15)
  // rs2
  registers.io.readreg2 := instruction(24,20)
  // funct 7
  aluControl.io.funct7 := instruction(31,25)

  // wire the result back to register's  
  registers.io.writedata := alu.io.result
  
  // check validity of registers
 
   when (registers.io.writereg =/= 0.U && control.io.writeback_valid === 1.U) {
    registers.io.wen := true.B
  } .otherwise {
    registers.io.wen := false.B
  }



  // wire aluop and operation  
  aluControl.io.aluop := control.io.aluop
  alu.io.operation := aluControl.io.operation

  // wire input x and y to readdata
  alu.io.operand1 := registers.io.readdata1
  alu.io.operand2 := registers.io.readdata2
  pc := pc + 4.U  //incrementing pc for next instruction

}


/*
 * Object to make it easier to print information about the CPU
 */
object SingleCycleCPUInfo {
  def getModules(): List[String] = {
    List(
      "dmem",
      "imem",
      "control",
      "registers",
      "csr",
      "aluControl",
      "alu",
      "immGen",
      "controlTransfer"
    )
... (2 lines left)
Collapse

message.txt
3 KB



﻿
mar
marina_lestoy

// This file is where all of the CPU components are assembled into the whole CPU

package dinocpu

import chisel3._
import chisel3.util._
import dinocpu.components._

/**
 * The main CPU definition that hooks up all of the other components.
 *
 * For more information, see section 4.4 of Patterson and Hennessy
 * This follows figure 4.21
 */
class SingleCycleCPU(implicit val conf: CPUConfig) extends BaseCPU {
  // All of the structures required
  val pc              = dontTouch(RegInit(0.U(64.W)))
  val control         = Module(new Control())
  val registers       = Module(new RegisterFile())
  val aluControl      = Module(new ALUControl())
  val alu             = Module(new ALU())
  val immGen          = Module(new ImmediateGenerator())
  val controlTransfer = Module(new ControlTransferUnit())
  val (cycleCount, _) = Counter(true.B, 1 << 30)

  control.io := DontCare
  registers.io := DontCare
  aluControl.io := DontCare
  alu.io := DontCare
  immGen.io := DontCare
  controlTransfer.io := DontCare
  io.dmem <> DontCare

  //FETCH
  io.imem.address := pc
  io.imem.valid := true.B

  val instruction = Wire(UInt(32.W))
  when ((pc % 8.U) === 4.U) {
    instruction := io.imem.instruction(63, 32)
  } .otherwise {
    instruction := io.imem.instruction(31, 0)
  }

  //Your code goes here
  // instruction will be a 32 bit long array, split in following lines
  // opcode
  control.io.opcode := instruction(6,0) 
  // rd
  registers.io.writereg := instruction(11,7)
  // funct 3
  aluControl.io.funct3 := instruction(14,12)  
  // rs1
  registers.io.readreg1 := instruction(19,15)
  // rs2
  registers.io.readreg2 := instruction(24,20)
  // funct 7
  aluControl.io.funct7 := instruction(31,25)

  // wire the result back to register's  
  registers.io.writedata := alu.io.result
  
  // check validity of registers
 
   when (registers.io.writereg =/= 0.U && control.io.writeback_valid === 1.U) {
    registers.io.wen := true.B
  } .otherwise {
    registers.io.wen := false.B
  }



  // wire aluop and operation  
  aluControl.io.aluop := control.io.aluop
  alu.io.operation := aluControl.io.operation

  // wire input x and y to readdata
  alu.io.operand1 := registers.io.readdata1
  alu.io.operand2 := registers.io.readdata2
  pc := pc + 4.U  //incrementing pc for next instruction

}


/*
 * Object to make it easier to print information about the CPU
 */
object SingleCycleCPUInfo {
  def getModules(): List[String] = {
    List(
      "dmem",
      "imem",
      "control",
      "registers",
      "csr",
      "aluControl",
      "alu",
      "immGen",
      "controlTransfer"
    )
  }
}